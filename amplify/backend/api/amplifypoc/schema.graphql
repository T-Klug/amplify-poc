# Force updated
enum OpenAIRoleType {
  SYSTEM
  ASSISTANT
  USER
}

type MessagesType {
  role: OpenAIRoleType
  content: String
}

type OpenAIChat @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  messages: [MessagesType]
  user: ID
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

input MessagesTypeFuncInput {
  role: OpenAIRoleType
  content: String
}

input CreateOpenAIChatFuncInput {
  id: ID
  messages: [MessagesTypeFuncInput]
  user: ID
  owner: String
  _version: Int
}

input ChatIcebreakerFuncInput {
  id: ID
  messages: [MessagesTypeFuncInput]
  user: ID
  owner: String
  _version: Int
}

input RoleplayChatFuncInput {
  id: ID
  messages: [MessagesTypeFuncInput]
  user: ID
  roleplayId: ID
  owner: String
  scenario: String
  difficulty: String
  _version: Int
}

input GenerateRoleplaySummaryFuncInput {
  roleplayId: ID
}
input GenerateUserSummaryFuncInput {
  id: ID
}

type Mutation {
  createOpenAIChatFunc(input: CreateOpenAIChatFuncInput): OpenAIChat
    @function(name: "createOpenAiChat-${env}")
    @auth(rules: [{ allow: private }])
  chatIcebreakerFunc(input: ChatIcebreakerFuncInput): IcebreakerChat
    @function(name: "icebreakerChat-${env}")
    @auth(rules: [{ allow: private }])
  generateUserSummaryFunc(input: GenerateUserSummaryFuncInput): String
    @function(name: "generateUserSummary-${env}")
    @auth(rules: [{ allow: private }])
  chatRoleplayFunc(input: RoleplayChatFuncInput): RoleplayChat
    @function(name: "roleplayChat-${env}")
    @auth(rules: [{ allow: private }])
  generateRoleplaySummaryFunc(
    input: GenerateRoleplaySummaryFuncInput
  ): RoleplaySummary
    @function(name: "generateRoleplaySummary-${env}")
    @auth(rules: [{ allow: private }])
}

type OpenAIModel
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  prompt: String!
  model: String!
  temperature: String!
  top_p: String!
  max_tokens: String!
  presence_penalty: String!
  frequency_penalty: String!
}

type Feedback
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: owner, operations: [create] }
    ]
  ) {
  id: ID!
  like: Boolean
  comment: String
  owner: String
}

type UserProfile
  @model
  @auth(rules: [{ allow: owner, operations: [read, create, update, delete] }]) {
  id: ID!
  userId: String
  name: String
  personalityTest: String
  background: String
  phone: String
  optInText: Boolean
  completedIcebreakers: Boolean
  userSummary: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type IcebreakerChat @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  messages: [MessagesType]
  user: ID
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type RoleplayChat @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  messages: [MessagesType]
  user: ID
  roleplayId: ID
  scenario: String
  difficulty: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type RoleplaySummary @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  summary: String
  user: ID
  roleplayId: ID
  scenario: String
  difficulty: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}
